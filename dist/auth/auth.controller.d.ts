import type { Request } from 'express';
import { ConfigService } from '@nestjs/config';
import { Repository } from 'typeorm';
import { AuthService } from './services/auth.service';
import { RegisterDto, RegisterResponseDto } from './dto/register.dto';
import { LoginDto, LoginResponseDto } from './dto/login.dto';
import { ForgotPasswordDto, ResetPasswordDto, PasswordRecoveryResponseDto, ResetPasswordResponseDto } from './dto/password-recovery.dto';
import { DeleteAccountDto, DeleteAccountResponseDto, LogoutResponseDto } from './dto/delete-account.dto';
import { UploadAvatarDto, UploadAvatarResponseDto } from './dto/avatar-upload.dto';
import { RequestEmailVerificationResponseDto } from './dto/request-email-verification.dto';
import { VerifyEmailDto, VerifyEmailResponseDto } from './dto/verify-email.dto';
import { RequestPhoneVerificationResponseDto } from './dto/request-phone-verification.dto';
import { VerifyPhoneDto, VerifyPhoneResponseDto } from './dto/verify-phone.dto';
import { Player } from '../entities/player.entity';
import { PasswordResetToken } from '../entities/password-reset-token.entity';
import { EmailVerificationToken } from '../entities/email-verification-token.entity';
import { PhoneVerificationToken } from '../entities/phone-verification-token.entity';
import { EmailService } from '../email/services/email.service';
import { DevicesService } from '../devices/services/devices.service';
import { TwilioService } from '../sms/services/twilio.service';
import { CasinoApiService } from '../external/casino/casino-api.service';
import type { AuthenticatedUser, AuthenticatedAdmin } from '../common/types/auth.types';
declare class TestTokenDto {
    email: string;
    type: 'user' | 'admin';
}
export declare class AuthController {
    private readonly authService;
    private readonly playerRepository;
    private readonly passwordResetTokenRepository;
    private readonly emailVerificationTokenRepository;
    private readonly phoneVerificationTokenRepository;
    private readonly emailService;
    private readonly devicesService;
    private readonly twilioService;
    private readonly casinoApiService;
    private readonly configService;
    private readonly logger;
    constructor(authService: AuthService, playerRepository: Repository<Player>, passwordResetTokenRepository: Repository<PasswordResetToken>, emailVerificationTokenRepository: Repository<EmailVerificationToken>, phoneVerificationTokenRepository: Repository<PhoneVerificationToken>, emailService: EmailService, devicesService: DevicesService, twilioService: TwilioService, casinoApiService: CasinoApiService, configService: ConfigService);
    private generateVisitorId;
    private getClientIp;
    register(registerDto: RegisterDto, req: Request): Promise<RegisterResponseDto>;
    login(loginDto: LoginDto, req: Request): Promise<LoginResponseDto>;
    generateTestToken(testTokenDto: TestTokenDto): Promise<{
        access_token: string;
        token_type: string;
        expires_in: string;
    }>;
    getCurrentUser(user: AuthenticatedUser | AuthenticatedAdmin, req: Request): Promise<{
        id: number;
        visitor_id: string;
        name: string | undefined;
        email: string | undefined;
        phone: string | undefined;
        coins_balance: number;
        rp_balance: number;
        level: number;
        scratch_cards: number;
        avatar: string | undefined;
        device_udid: string | undefined;
        subscription_agreement: boolean | undefined;
        tnc_agreement: boolean | undefined;
        os: string | undefined;
        device: string | undefined;
        age_checkbox: boolean | undefined;
        auth_user_id: string | undefined;
        created_at: Date;
        updated_at: Date;
        pid: string | undefined;
        c: string | undefined;
        af_channel: string | undefined;
        af_adset: string | undefined;
        af_ad: string | undefined;
        af_keywords: string[] | undefined;
        is_retargeting: boolean | undefined;
        af_click_lookback: number | undefined;
        af_viewthrough_lookback: number | undefined;
        af_sub1: string | undefined;
        af_sub2: string | undefined;
        af_sub3: string | undefined;
        af_sub4: string | undefined;
        af_sub5: string | undefined;
        email_verified: boolean;
        email_verified_at: Date | undefined;
        phone_verified: boolean;
        phone_verified_at: Date | undefined;
        type: string;
        ipaddress: string;
        display_name?: undefined;
        is_active?: undefined;
    } | {
        id: string | number;
        email: any;
        type: string;
        display_name: string;
        is_active: boolean;
        visitor_id?: undefined;
        name?: undefined;
        phone?: undefined;
        coins_balance?: undefined;
        rp_balance?: undefined;
        level?: undefined;
        scratch_cards?: undefined;
        avatar?: undefined;
        device_udid?: undefined;
        subscription_agreement?: undefined;
        tnc_agreement?: undefined;
        os?: undefined;
        device?: undefined;
        age_checkbox?: undefined;
        auth_user_id?: undefined;
        created_at?: undefined;
        updated_at?: undefined;
        pid?: undefined;
        c?: undefined;
        af_channel?: undefined;
        af_adset?: undefined;
        af_ad?: undefined;
        af_keywords?: undefined;
        is_retargeting?: undefined;
        af_click_lookback?: undefined;
        af_viewthrough_lookback?: undefined;
        af_sub1?: undefined;
        af_sub2?: undefined;
        af_sub3?: undefined;
        af_sub4?: undefined;
        af_sub5?: undefined;
        email_verified?: undefined;
        email_verified_at?: undefined;
        phone_verified?: undefined;
        phone_verified_at?: undefined;
        ipaddress?: undefined;
    }>;
    getAdminData(admin: AuthenticatedAdmin): Promise<{
        message: string;
        admin: {
            id: string;
            email: string;
            display_name: string;
        };
    }>;
    getPublicData(): Promise<{
        message: string;
        timestamp: string;
    }>;
    forgotPassword(forgotPasswordDto: ForgotPasswordDto): Promise<PasswordRecoveryResponseDto>;
    resetPassword(resetPasswordDto: ResetPasswordDto): Promise<ResetPasswordResponseDto>;
    logout(): Promise<LogoutResponseDto>;
    uploadAvatar(user: AuthenticatedUser, uploadAvatarDto: UploadAvatarDto): Promise<UploadAvatarResponseDto>;
    deleteAccount(user: AuthenticatedUser, deleteAccountDto: DeleteAccountDto): Promise<DeleteAccountResponseDto>;
    requestEmailVerification(user: AuthenticatedUser): Promise<RequestEmailVerificationResponseDto>;
    verifyEmail(user: AuthenticatedUser, verifyEmailDto: VerifyEmailDto): Promise<VerifyEmailResponseDto>;
    requestPhoneVerification(user: AuthenticatedUser): Promise<RequestPhoneVerificationResponseDto>;
    verifyPhone(user: AuthenticatedUser, verifyPhoneDto: VerifyPhoneDto): Promise<VerifyPhoneResponseDto>;
    private getBaseUrl;
}
export {};
