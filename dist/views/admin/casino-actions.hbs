<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">
    <i class="bi bi-activity"></i>
    Casino Actions Management
  </h1>
  <div class="btn-toolbar mb-2 mb-md-0">
    <div class="btn-group me-2">
      <button type="button" class="btn btn-sm btn-primary" onclick="showCreateCasinoActionModal()">
        <i class="bi bi-plus-circle"></i>
        Create Action
      </button>
      <button type="button" class="btn btn-sm btn-success" onclick="showBulkUploadModal()">
        <i class="bi bi-upload"></i>
        Bulk Upload CSV
      </button>
      <button type="button" class="btn btn-sm btn-outline-secondary" onclick="refreshCasinoActions()">
        <i class="bi bi-arrow-clockwise"></i>
        Refresh
      </button>
    </div>
  </div>
</div>

<!-- Search and Filter Section -->
<div class="card mb-4">
  <div class="card-header">
    <i class="bi bi-funnel"></i>
    Search & Filter Casino Actions
  </div>
  <div class="card-body">
    <form id="casinoActionSearchForm">
      <div class="row g-3">
        <div class="col-md-4">
          <label for="search" class="form-label">Search</label>
          <input type="text" class="form-control" id="search" placeholder="Visitor ID..." 
                 value="{{searchQuery}}">
        </div>
        <div class="col-md-2">
          <label for="casinoName" class="form-label">Casino</label>
          <select class="form-select" id="casinoName">
            <option value="">All Casinos</option>
            {{#each casinos}}
            <option value="{{this.casino_name}}" {{#if (eq ../selectedCasinoName this.casino_name)}}selected{{/if}}>
              {{this.casino_name}}
            </option>
            {{/each}}
          </select>
        </div>
        <div class="col-md-2">
          <label for="registration" class="form-label">Registration</label>
          <select class="form-select" id="registration">
            <option value="">Any</option>
            <option value="true" {{#if (eq registrationFilter 'true')}}selected{{/if}}>Yes</option>
            <option value="false" {{#if (eq registrationFilter 'false')}}selected{{/if}}>No</option>
          </select>
        </div>
        <div class="col-md-2">
          <label for="deposit" class="form-label">Deposit</label>
          <select class="form-select" id="deposit">
            <option value="">Any</option>
            <option value="true" {{#if (eq depositFilter 'true')}}selected{{/if}}>Yes</option>
            <option value="false" {{#if (eq depositFilter 'false')}}selected{{/if}}>No</option>
          </select>
        </div>
        <div class="col-md-2">
          <label for="sortBy" class="form-label">Sort By</label>
          <select class="form-select" id="sortBy">
            <option value="date_of_action" {{#if (eq sortBy 'date_of_action')}}selected{{/if}}>Action Date</option>
            <option value="created_at" {{#if (eq sortBy 'created_at')}}selected{{/if}}>Created Date</option>
            <option value="visitor_id" {{#if (eq sortBy 'visitor_id')}}selected{{/if}}>Visitor ID</option>
          </select>
        </div>
      </div>
      <div class="row mt-3">
        <div class="col-12">
          <button type="submit" class="btn btn-primary">
            <i class="bi bi-search"></i>
            Search
          </button>
          <button type="button" class="btn btn-secondary ms-2" onclick="clearSearch()">
            <i class="bi bi-x-circle"></i>
            Clear
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Casino Actions Table -->
<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <span>
      <i class="bi bi-table"></i>
      Casino Actions List ({{pagination.total}} total)
    </span>
    <small class="text-muted">
      Showing {{pagination.from}}-{{pagination.to}} of {{pagination.total}}
    </small>
  </div>
  <div class="card-body p-0">
    <div class="table-responsive">
      <table class="table table-hover mb-0">
        <thead class="table-dark">
          <tr>
            <th>ID</th>
            <th>Casino</th>
            <th>Visitor ID</th>
            <th>Player Name</th>
            <th>Action Date</th>
            <th>Registration</th>
            <th>Deposit</th>
            <th>Created</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {{#each casinoActions}}
          <tr>
            <td>
              <span class="badge bg-info">{{this.id}}</span>
            </td>
            <td>
              <div class="d-flex align-items-center">
                <div class="avatar-sm me-2">
                  <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center" 
                       style="width: 30px; height: 30px; font-size: 12px;">
                    <i class="bi bi-building"></i>
                  </div>
                </div>
                <div>
                  <div class="fw-bold">{{this.casino_name}}</div>
                </div>
              </div>
            </td>
            <td>
              <code>{{this.visitor_id}}</code>
            </td>
            <td>
              {{#if this.player}}
              <div>{{this.player.name}}</div>
              <small class="text-muted">{{this.player.email}}</small>
              {{else}}
              <span class="text-muted">Unknown Player</span>
              {{/if}}
            </td>
            <td>
              <small>{{formatDate this.date_of_action}}</small>
            </td>
            <td>
              {{#if this.registration}}
              <span class="badge bg-success">Yes</span>
              {{else}}
              <span class="badge bg-secondary">No</span>
              {{/if}}
            </td>
            <td>
              {{#if this.deposit}}
              <span class="badge bg-success">Yes</span>
              {{else}}
              <span class="badge bg-secondary">No</span>
              {{/if}}
            </td>
            <td>
              <small class="text-muted">{{formatDate this.created_at}}</small>
            </td>
            <td>
              <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-primary" 
                        onclick="viewCasinoAction('{{this.id}}')" title="View Details">
                  <i class="bi bi-eye"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary" 
                        onclick="editCasinoAction('{{this.id}}')" title="Edit Action">
                  <i class="bi bi-pencil"></i>
                </button>
                <button type="button" class="btn btn-outline-danger" 
                        onclick="deleteCasinoAction('{{this.id}}')" title="Delete Action">
                  <i class="bi bi-trash"></i>
                </button>
              </div>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
    
    {{#if pagination.hasPages}}
    <div class="card-footer">
      <nav>
        <ul class="pagination pagination-sm justify-content-center mb-0">
          <li class="page-item {{#unless pagination.hasPrev}}disabled{{/unless}}">
            <a class="page-link" href="?page={{pagination.prevPage}}&{{queryString}}">Previous</a>
          </li>
          
          {{#each pagination.pages}}
          <li class="page-item {{#if this.active}}active{{/if}}">
            <a class="page-link" href="?page={{this.number}}&{{../queryString}}">{{this.number}}</a>
          </li>
          {{/each}}
          
          <li class="page-item {{#unless pagination.hasNext}}disabled{{/unless}}">
            <a class="page-link" href="?page={{pagination.nextPage}}&{{queryString}}">Next</a>
          </li>
        </ul>
      </nav>
    </div>
    {{/if}}
  </div>
</div>

<!-- Create Casino Action Modal -->
<div class="modal fade" id="createCasinoActionModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="bi bi-plus-circle"></i>
          Create New Casino Action
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="createCasinoActionForm">
        <div class="modal-body">
          <div class="mb-3">
            <label for="actionCasinoName" class="form-label">Casino</label>
            <select class="form-select" id="actionCasinoName" name="casino_name" required>
              <option value="">Select Casino...</option>
              {{#each casinos}}
              <option value="{{this.casino_name}}">{{this.casino_name}}</option>
              {{/each}}
            </select>
          </div>
          <div class="mb-3">
            <label for="actionVisitorId" class="form-label">Visitor ID</label>
            <input type="text" class="form-control" id="actionVisitorId" name="visitor_id" required>
          </div>
          <div class="mb-3">
            <label for="actionDate" class="form-label">Action Date</label>
            <input type="datetime-local" class="form-control" id="actionDate" name="date_of_action" required>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="actionRegistration" name="registration" value="true">
              <label class="form-check-label" for="actionRegistration">
                Registration Action
              </label>
            </div>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="actionDeposit" name="deposit" value="true">
              <label class="form-check-label" for="actionDeposit">
                Deposit Action
              </label>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create Action</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Casino Action Details Modal -->
<div class="modal fade" id="casinoActionModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="bi bi-activity"></i>
          Casino Action Details
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="casinoActionModalBody">
        <!-- Casino action details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="editCasinoActionBtn">Edit Action</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Casino Action Modal -->
<div class="modal fade" id="editCasinoActionModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="bi bi-pencil"></i>
          Edit Casino Action
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="editCasinoActionForm">
        <div class="modal-body">
          <input type="hidden" id="editActionId" name="actionId">
          <div class="mb-3">
            <label for="editActionCasinoName" class="form-label">Casino</label>
            <select class="form-select" id="editActionCasinoName" name="casino_name" required>
              <option value="">Select Casino...</option>
              {{#each casinos}}
              <option value="{{this.casino_name}}">{{this.casino_name}}</option>
              {{/each}}
            </select>
          </div>
          <div class="mb-3">
            <label for="editActionVisitorId" class="form-label">Visitor ID</label>
            <input type="text" class="form-control" id="editActionVisitorId" name="visitor_id" required>
          </div>
          <div class="mb-3">
            <label for="editActionDate" class="form-label">Action Date</label>
            <input type="datetime-local" class="form-control" id="editActionDate" name="date_of_action" required>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editActionRegistration" name="registration" value="true">
              <label class="form-check-label" for="editActionRegistration">
                Registration Action
              </label>
            </div>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editActionDeposit" name="deposit" value="true">
              <label class="form-check-label" for="editActionDeposit">
                Deposit Action
              </label>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Bulk Upload CSV Modal -->
<div class="modal fade" id="bulkUploadModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="bi bi-upload"></i>
          Bulk Upload Casino Actions from CSV
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="bulkUploadForm" enctype="multipart/form-data">
        <div class="modal-body">
          <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            <strong>CSV Format Requirements:</strong>
            <ul class="mb-0 mt-2">
              <li><strong>Headers:</strong> casino_name, visitor_id, date_of_action, registration, deposit</li>
              <li><strong>Date Format:</strong> YYYY-MM-DD HH:MM:SS or YYYY-MM-DD</li>
              <li><strong>Boolean Values:</strong> true/false, 1/0, yes/no (case insensitive)</li>
              <li><strong>Example:</strong> "Bella Vegas", "visitor_123", "2024-01-15 14:30:00", true, false</li>
            </ul>
          </div>
          
          <div class="mb-3">
            <label for="csvFile" class="form-label">CSV File</label>
            <input type="file" class="form-control" id="csvFile" name="csvFile" accept=".csv" required>
            <div class="form-text">Select a CSV file containing casino actions data.</div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="skipErrors" name="skipErrors" value="true" checked>
              <label class="form-check-label" for="skipErrors">
                Skip rows with errors and continue processing
              </label>
              <div class="form-text">If unchecked, the entire upload will fail on the first error.</div>
            </div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="createMissingCasinos" name="createMissingCasinos" value="true" checked>
              <label class="form-check-label" for="createMissingCasinos">
                Auto-create missing casinos
              </label>
              <div class="form-text">Automatically create casino records for casino names that don't exist yet.</div>
            </div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="createMissingPlayers" name="createMissingPlayers" value="true" checked>
              <label class="form-check-label" for="createMissingPlayers">
                Auto-create missing players
              </label>
              <div class="form-text">Automatically create player records for visitor IDs that don't exist yet.</div>
            </div>
          </div>
          
          <!-- Upload Progress -->
          <div id="uploadProgress" style="display: none;">
            <div class="mb-3">
              <label class="form-label">Upload Progress</label>
              <div class="progress">
                <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
              </div>
              <small id="progressText" class="text-muted">Starting upload...</small>
            </div>
          </div>
          
          <!-- Upload Results -->
          <div id="uploadResults" style="display: none;">
            <div class="alert" id="resultsAlert">
              <div id="resultsContent"></div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success" id="uploadButton">
            <i class="bi bi-upload"></i>
            Upload CSV
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Casino Actions management JavaScript functions
function showBulkUploadModal() {
  document.getElementById('bulkUploadForm').reset();
  document.getElementById('uploadProgress').style.display = 'none';
  document.getElementById('uploadResults').style.display = 'none';
  new bootstrap.Modal(document.getElementById('bulkUploadModal')).show();
}

function showCreateCasinoActionModal() {
  document.getElementById('createCasinoActionForm').reset();
  // Set current date/time as default
  const now = new Date();
  now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
  document.getElementById('actionDate').value = now.toISOString().slice(0, 16);
  new bootstrap.Modal(document.getElementById('createCasinoActionModal')).show();
}

async function viewCasinoAction(actionId) {
  try {
    const response = await fetch(`/admin/casino-actions/api/${actionId}`, {
      method: 'GET',
      credentials: 'include'
    });
    
    if (!response.ok) {
      throw new Error('Failed to fetch casino action details');
    }
    
    const response_data = await response.json();
    const action = response_data.data || response_data;
    
    document.getElementById('casinoActionModalBody').innerHTML = `
      <div class="row">
        <div class="col-md-6">
          <p><strong>ID:</strong> ${action.id}</p>
          <p><strong>Casino:</strong> ${action.casino_name || 'Unknown'}</p>
          <p><strong>Visitor ID:</strong> <code>${action.visitor_id}</code></p>
          <p><strong>Player:</strong> ${action.player?.name || 'Unknown'}</p>
          <p><strong>Player Email:</strong> ${action.player?.email || 'N/A'}</p>
        </div>
        <div class="col-md-6">
          <p><strong>Action Date:</strong> ${new Date(action.date_of_action).toLocaleString()}</p>
          <p><strong>Registration:</strong> ${action.registration ? 'Yes' : 'No'}</p>
          <p><strong>Deposit:</strong> ${action.deposit ? 'Yes' : 'No'}</p>
          <p><strong>Created:</strong> ${new Date(action.created_at).toLocaleString()}</p>
          <p><strong>Last Updated:</strong> ${new Date(action.updated_at).toLocaleString()}</p>
        </div>
      </div>
    `;
    
    document.getElementById('editCasinoActionBtn').onclick = () => {
      document.getElementById('casinoActionModal').querySelector('[data-bs-dismiss="modal"]').click();
      editCasinoAction(actionId);
    };
    
    new bootstrap.Modal(document.getElementById('casinoActionModal')).show();
  } catch (error) {
    console.error('Error viewing casino action:', error);
    alert('Error loading casino action details');
  }
}

async function editCasinoAction(actionId) {
  try {
    const response = await fetch(`/admin/casino-actions/api/${actionId}`, {
      method: 'GET',
      credentials: 'include'
    });
    
    if (!response.ok) {
      throw new Error('Failed to fetch casino action details');
    }
    
    const response_data = await response.json();
    const action = response_data.data || response_data;
    
    document.getElementById('editActionId').value = action.id;
    document.getElementById('editActionCasinoName').value = action.casino_name;
    document.getElementById('editActionVisitorId').value = action.visitor_id;
    
    // Format date for datetime-local input
    const actionDate = new Date(action.date_of_action);
    actionDate.setMinutes(actionDate.getMinutes() - actionDate.getTimezoneOffset());
    document.getElementById('editActionDate').value = actionDate.toISOString().slice(0, 16);
    
    document.getElementById('editActionRegistration').checked = action.registration;
    document.getElementById('editActionDeposit').checked = action.deposit;
    
    new bootstrap.Modal(document.getElementById('editCasinoActionModal')).show();
  } catch (error) {
    console.error('Error loading casino action for edit:', error);
    alert('Error loading casino action details');
  }
}

async function deleteCasinoAction(actionId) {
  if (!confirm('Are you sure you want to delete this casino action? This action cannot be undone.')) {
    return;
  }
  
  try {
    const response = await fetch(`/admin/casino-actions/api/${actionId}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    
    if (!response.ok) {
      throw new Error('Failed to delete casino action');
    }
    
    location.reload();
  } catch (error) {
    console.error('Error deleting casino action:', error);
    alert('Error deleting casino action');
  }
}

function refreshCasinoActions() {
  location.reload();
}

function clearSearch() {
  document.getElementById('search').value = '';
  document.getElementById('casinoName').value = '';
  document.getElementById('registration').value = '';
  document.getElementById('deposit').value = '';
  document.getElementById('sortBy').value = 'date_of_action';
  document.getElementById('casinoActionSearchForm').submit();
}

// Form submissions
document.getElementById('createCasinoActionForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const data = Object.fromEntries(formData);
  
  // Convert checkbox values to boolean
  data.registration = document.getElementById('actionRegistration').checked;
  data.deposit = document.getElementById('actionDeposit').checked;
  
  try {
    const response = await fetch('/admin/casino-actions/api', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to create casino action');
    }
    
    location.reload();
  } catch (error) {
    console.error('Error creating casino action:', error);
    alert('Error creating casino action: ' + error.message);
  }
});

document.getElementById('editCasinoActionForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const data = Object.fromEntries(formData);
  const actionId = data.actionId;
  delete data.actionId;
  
  // Convert checkbox values to boolean
  data.registration = document.getElementById('editActionRegistration').checked;
  data.deposit = document.getElementById('editActionDeposit').checked;
  
  try {
    const response = await fetch(`/admin/casino-actions/api/${actionId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to update casino action');
    }
    
    location.reload();
  } catch (error) {
    console.error('Error updating casino action:', error);
    alert('Error updating casino action: ' + error.message);
  }
});

document.getElementById('casinoActionSearchForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const formData = new FormData(this);
  const params = new URLSearchParams();
  
  for (const [key, value] of formData) {
    if (value) params.append(key, value);
  }
  
  window.location.search = params.toString();
});

// Bulk Upload Form Handler
document.getElementById('bulkUploadForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const uploadButton = document.getElementById('uploadButton');
  const progressDiv = document.getElementById('uploadProgress');
  const resultsDiv = document.getElementById('uploadResults');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  
  // Show progress
  progressDiv.style.display = 'block';
  resultsDiv.style.display = 'none';
  uploadButton.disabled = true;
  uploadButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Uploading...';
  
  progressBar.style.width = '10%';
  progressText.textContent = 'Uploading file...';
  
  try {
    const response = await fetch('/admin/casino-actions/api/bulk-upload', {
      method: 'POST',
      credentials: 'include',
      body: formData
    });
    
    progressBar.style.width = '90%';
    progressText.textContent = 'Processing...';
    
    const result = await response.json();
    
    progressBar.style.width = '100%';
    progressText.textContent = 'Complete!';
    
    // Show results
    setTimeout(() => {
      progressDiv.style.display = 'none';
      resultsDiv.style.display = 'block';
      
      const resultsAlert = document.getElementById('resultsAlert');
      const resultsContent = document.getElementById('resultsContent');
      
      if (response.ok) {
        resultsAlert.className = 'alert alert-success';
        resultsContent.innerHTML = `
          <h6><i class="bi bi-check-circle"></i> Upload Successful!</h6>
          <p><strong>Total Rows:</strong> ${result.data.summary.totalRows}</p>
          <p><strong>Successfully Processed:</strong> ${result.data.summary.successfulRows}</p>
          <p><strong>Skipped/Errors:</strong> ${result.data.summary.errorRows}</p>
          ${result.data.summary.createdCasinos > 0 ? `<p><strong>New Casinos Created:</strong> ${result.data.summary.createdCasinos}</p>` : ''}
          ${result.data.summary.createdPlayers > 0 ? `<p><strong>New Players Created:</strong> ${result.data.summary.createdPlayers}</p>` : ''}
          ${result.data.errors && result.data.errors.length > 0 ? 
            `<hr><h6>Errors/Warnings:</h6><ul class="mb-0">${result.data.errors.map(err => `<li>Row ${err.row}: ${err.message}</li>`).join('')}</ul>` 
            : ''}
        `;
        
        // Auto-close and refresh after 3 seconds
        setTimeout(() => {
          location.reload();
        }, 3000);
      } else {
        resultsAlert.className = 'alert alert-danger';
        resultsContent.innerHTML = `
          <h6><i class="bi bi-exclamation-triangle"></i> Upload Failed</h6>
          <p>${result.data?.message || result.message || 'An error occurred during upload.'}</p>
          ${result.data?.errors && result.data.errors.length > 0 ? 
            `<hr><h6>Errors:</h6><ul class="mb-0">${result.data.errors.map(err => `<li>Row ${err.row}: ${err.message}</li>`).join('')}</ul>` 
            : ''}
        `;
      }
    }, 500);
    
  } catch (error) {
    console.error('Error uploading CSV:', error);
    progressDiv.style.display = 'none';
    resultsDiv.style.display = 'block';
    
    const resultsAlert = document.getElementById('resultsAlert');
    const resultsContent = document.getElementById('resultsContent');
    resultsAlert.className = 'alert alert-danger';
    resultsContent.innerHTML = `
      <h6><i class="bi bi-exclamation-triangle"></i> Upload Error</h6>
      <p>Failed to upload CSV file: ${error.message}</p>
    `;
  } finally {
    uploadButton.disabled = false;
    uploadButton.innerHTML = '<i class="bi bi-upload"></i> Upload CSV';
  }
});
</script>